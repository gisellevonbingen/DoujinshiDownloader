<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Type" xml:space="preserve">
    <value>en-US</value>
  </data>
  <data name="NotifyIcon.Show" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="NotifyIcon.Hide" xml:space="preserve">
    <value>Hide</value>
  </data>
  <data name="NotifyIcon.Dispose" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="NotifyIcon.RunningBackgroundNotifyMessage" xml:space="preserve">
    <value>Program Running In Background</value>
  </data>
  <data name="NotifyIcon.DownloadCompleteNotifyMessage.Title" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="NotifyIcon.DownloadCompleteNotifyMessage.Text" xml:space="preserve">
    <value>{=Title}</value>
  </data>
  <data name="CrashReport.Title" xml:space="preserve">
    <value>Crash Report</value>
  </data>
  <data name="CrashReport.Message" xml:space="preserve">
    <value>Unexpected Exception
Please Submit This Report</value>
  </data>
  <data name="CrashReport.Copy" xml:space="preserve">
    <value>Copy Log</value>
  </data>
  <data name="CrashReport.Copied" xml:space="preserve">
    <value>Copied</value>
  </data>
  <data name="CrashReport.OpenDirectory" xml:space="preserve">
    <value>Open Directory</value>
  </data>
  <data name="CrashReport.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="QuitDialog.Title" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="QuitDialog.Text.Busy" xml:space="preserve">
    <value>Download in progress
Are You Sure You Want To Quit?</value>
  </data>
  <data name="QuitDialog.Text.Common" xml:space="preserve">
    <value>Are you sure you want to quit?</value>
  </data>
  <data name="MainMenu.Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="MainMenu.DownloadDirectory" xml:space="preserve">
    <value>Open Download Directory</value>
  </data>
  <data name="MainMenu.NewDownloadButton" xml:space="preserve">
    <value>New Download</value>
  </data>
  <data name="NewDownload.Title" xml:space="preserve">
    <value>New Download</value>
  </data>
  <data name="NewDownload.Input" xml:space="preserve">
    <value>Input(URL)</value>
  </data>
  <data name="NewDownload.Verify" xml:space="preserve">
    <value>Verify</value>
  </data>
  <data name="NewDownload.Verify.Invalid" xml:space="preserve">
    <value>Invalid Input(URL)</value>
  </data>
  <data name="NewDownload.Verify.Verifying" xml:space="preserve">
    <value>Verifying</value>
  </data>
  <data name="NewDownload.Verify.Verified" xml:space="preserve">
    <value>Verified</value>
  </data>
  <data name="NewDownload.Verify.VerifyFailed" xml:space="preserve">
    <value>Verify Failed</value>
  </data>
  <data name="NewDownload.Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="NewDownload.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="NewDownload.Continue" xml:space="preserve">
    <value>Add Continuously</value>
  </data>
  <data name="DownloadSelect.Title" xml:space="preserve">
    <value>Select Download</value>
  </data>
  <data name="DownloadSelect.None" xml:space="preserve">
    <value>Download Not Exist</value>
  </data>
  <data name="DownloadSelect.Site.Hitomi.Gallery" xml:space="preserve">
    <value>Hitomi</value>
  </data>
  <data name="DownloadSelect.Site.E-Hentai" xml:space="preserve">
    <value>E-Hentai</value>
  </data>
  <data name="DownloadSelect.Site.ExHentai" xml:space="preserve">
    <value>ExHentai</value>
  </data>
  <data name="DownloadSelect.Option.ExHentai.Original" xml:space="preserve">
    <value>Download as Original File</value>
  </data>
  <data name="DownloadSelect.Verify.Verifing" xml:space="preserve">
    <value>Verifing</value>
  </data>
  <data name="DownloadSelect.Verify.NotSupported" xml:space="preserve">
    <value>Not Supported</value>
  </data>
  <data name="DownloadSelect.Verify.NetworkError" xml:space="preserve">
    <value>Network Error</value>
  </data>
  <data name="DownloadSelect.Verify.ExHentaiAccountError" xml:space="preserve">
    <value>ExHentai Account Error</value>
  </data>
  <data name="DownloadSelect.Verify.GalleryRemoved" xml:space="preserve">
    <value>Gallery Removed</value>
  </data>
  <data name="DownloadSelect.Verify.TitleError" xml:space="preserve">
    <value>Error To Get Title</value>
  </data>
  <data name="DownloadSelect.Add.MissingInput" xml:space="preserve">
    <value>Missing Input Verify</value>
  </data>
  <data name="DownloadSelect.Add.MissingServer" xml:space="preserve">
    <value>Missing Server</value>
  </data>
  <data name="Settings.Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Settings.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Settings.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Settings.Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Settings.Program.Title" xml:space="preserve">
    <value>Program</value>
  </data>
  <data name="Settings.Program.AllowBackground" xml:space="preserve">
    <value>Allow Running In Background</value>
  </data>
  <data name="Settings.Program.AllowNotifyMessage" xml:space="preserve">
    <value>Allow Notifications</value>
  </data>
  <data name="Settings.Program.NotifyMessageRules.HideMainForm" xml:space="preserve">
    <value>When Main Window Hidden</value>
  </data>
  <data name="Settings.Program.NotifyMessageRules.DownloadComplete" xml:space="preserve">
    <value>On Download Completion</value>
  </data>
  <data name="Settings.Program.UserInterfaceRule" xml:space="preserve">
    <value>User Interface</value>
  </data>
  <data name="Settings.Program.UserInterfaceRules.ConfirmBeforeExitProgram" xml:space="preserve">
    <value>Confirm Before Exit Program</value>
  </data>
  <data name="Settings.Program.UserInterfaceRules.ConfirmBeforeRemoveDownload" xml:space="preserve">
    <value>Confirm Before Cancel/Remove Download</value>
  </data>
  <data name="Settings.ExHentaiAccount.Title" xml:space="preserve">
    <value>E-Hentai/ExHentai Account</value>
  </data>
  <data name="Settings.ExHentaiAccount.Verify" xml:space="preserve">
    <value>Verify Account</value>
  </data>
  <data name="Settings.ExHentaiAccount.Verifying" xml:space="preserve">
    <value>Verifying</value>
  </data>
  <data name="Settings.ExHentaiAccount.Success" xml:space="preserve">
    <value>Account Verified</value>
  </data>
  <data name="Settings.ExHentaiAccount.Fail" xml:space="preserve">
    <value>Verify Fail</value>
  </data>
  <data name="Settings.ExHentaiAccount.Information" xml:space="preserve">
	<value>Account Information</value>
  </data>
  <data name="Settings.ExHentaiAccount.Information.None" xml:space="preserve">
	<value>Require Verify Account</value>
  </data>
  <data name="Settings.ExHentaiAccount.Information.ImageLimit" xml:space="preserve">
    <value>E-Hentai/ExHentai Image Limit
    Current : {=Current}
    Limit : {=Limit}

Increase When Bring Image From E-Hentai/ExHentai Server

If Current Exceed Limit, Can't Bring Image</value>
  </data>
  <data name="Settings.Network.Title" xml:space="preserve">
    <value>Network</value>
  </data>
  <data name="Settings.Network.DefaultValueTemplete" xml:space="preserve">
    <value>(Default : {=Value}{=Unit})</value>
  </data>
  <data name="Settings.Network.Timeout" xml:space="preserve">
    <value>Timeout {=Default}</value>
  </data>
  <data name="Settings.Network.TimeoutUnit" xml:space="preserve">
    <value>s</value>
  </data>
  <data name="Settings.Network.ThreadCount" xml:space="preserve">
    <value>Thread Count {=Default}</value>
  </data>
  <data name="Settings.Network.ThreadCountUnit" xml:space="preserve">
    <value></value>
  </data>
  <data name="Settings.Network.RetryCount" xml:space="preserve">
    <value>Retry Count {=Default}</value>
  </data>
  <data name="Settings.Network.RetryCountUnit" xml:space="preserve">
    <value></value>
  </data>
  <data name="Settings.Network.ServiceUnavailableSleep" xml:space="preserve">
    <value>Delay when Server Busy {=Default}</value>
  </data>
  <data name="Settings.Download.Title" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="Settings.Download.CompleteAutoRemove" xml:space="preserve">
    <value>Remove On Download Complete</value>
  </data>
  <data name="Settings.Download.DownloadToArchive" xml:space="preserve">
    <value>Downalod To Archive File (*.zip)</value>
  </data>
  <data name="Settings.Download.SingleFrameConvertType" xml:space="preserve">
    <value>General Image Format</value>
  </data>
  <data name="Settings.Download.MultiFrameConvertType" xml:space="preserve">
    <value>Animated Image Format</value>
  </data>
  <data name="Settings.Download.DirectoryTextBox" xml:space="preserve">
    <value>Directory</value>
  </data>
  <data name="Settings.Download.DirectoryWarning" xml:space="preserve">
    <value>※ Supports Both Relative and Absolute Paths
※ Some Directories Require Administrator Privileges</value>
  </data>
  <data name="Settings.Hook.Title" xml:space="preserve">
    <value>Event Hook</value>
  </data>
  <data name="Settings.Hook.WaitForExit" xml:space="preserve">
    <value>Wait For Execute Complete</value>
  </data>
  <data name="Settings.Hook.List" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="Settings.Hook.Commandline" xml:space="preserve">
    <value>Commandline To Execute</value>
  </data>
  <data name="Settings.Hook.Macro" xml:space="preserve">
    <value>Macro</value>
  </data>
  <data name="SelectMacro.Title" xml:space="preserve">
    <value>Select Macro</value>
  </data>
  <data name="SelectMacro.Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="SelectMacro.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SelectMacro.Insert" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="Download.Detail" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="Download.Detail.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Download.Detail.State.StandBy" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Download.Detail.State.Downloading" xml:space="preserve">
    <value>Downloading</value>
  </data>
  <data name="Download.Detail.State.Complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="Download.Detail.State.Success" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="Download.Detail.State.Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="Download.Detail.FilteredCount" xml:space="preserve">
    <value>Showing Count : {=Index}/{=Count}</value>
  </data>
  <data name="Download.Detail.Exception.Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="Download.Detail.Exception.RequestNotCreate" xml:space="preserve">
    <value>File Not Found</value>
  </data>
  <data name="Download.Detail.Exception.Network" xml:space="preserve">
    <value>Network Error</value>
  </data>
  <data name="Download.Detail.Exception.ImageLimit" xml:space="preserve">
    <value>Image Limit Exceeded</value>
  </data>
  <data name="Download.OpenDirectory" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Download.OpenDirectory.NotCreate" xml:space="preserve">
    <value>Download Not Started</value>
  </data>
  <data name="Download.OpenDirectory.NotExist" xml:space="preserve">
    <value>Directory/File Not Found, Maybe Remove or Renamed</value>
  </data>
  <data name="Download.Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Download.Remove.Dialog.Title" xml:space="preserve">
    <value>Confirm Remove</value>
  </data>
  <data name="Download.Remove.Dialog.WithCancelText" xml:space="preserve">
    <value>Cancel Download For Remove From List
Would You Like To Continue?</value>
  </data>
  <data name="Download.Remove.Dialog.Text" xml:space="preserve">
    <value>Remove Download From List
Would You Like To Continue?</value>
  </data>
  <data name="Download.State.NotStarted" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Download.State.Starting" xml:space="preserve">
    <value>Starting</value>
  </data>
  <data name="Download.State.Running" xml:space="preserve">
    <value>Downloading {=Percent}% ({=Index}/{=Count})</value>
  </data>
  <data name="Download.State.Canceling" xml:space="preserve">
    <value>Canceling</value>
  </data>
  <data name="Download.State.Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="Download.State.Excepted" xml:space="preserve">
    <value>Unexpected Excepted</value>
  </data>
  <data name="Download.State.Completed" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="Download.State.Completed.Fails" xml:space="preserve">
    <value> (Fail Files : {=ExceptionCount})</value>
  </data>
  <data name="ImageConvertType.Original" xml:space="preserve">
    <value>Original (Don't Convert)</value>
  </data>
  <data name="Hook.Download.Start.Name" xml:space="preserve">
    <value>Download Started</value>
  </data>
  <data name="Hook.Download.Cancelled.Name" xml:space="preserve">
    <value>Download Cancelled</value>
  </data>
  <data name="Hook.Download.Excepted.Name" xml:space="preserve">
    <value>Download Excepted</value>
  </data>
  <data name="Hook.Download.Success.Name" xml:space="preserve">
    <value>Download Success</value>
  </data>
  <data name="Hook.Download.Complete.Name" xml:space="preserve">
    <value>Download Complete</value>
  </data>
  <data name="Macro.Program.Directory.Name" xml:space="preserve">
    <value>Program Directory</value>
  </data>
  <data name="Macro.Program.Directory.Desc" xml:space="preserve">
    <value>Program running directory
Current: ${Program.Directory}</value>
  </data>
  <data name="Macro.Download.Directory.Name" xml:space="preserve">
    <value>Download Directory</value>
  </data>
  <data name="Macro.Download.Directory.Desc" xml:space="preserve">
    <value>Configued 'Download Directory'
Current: ${Download.Directory}</value>
  </data>
  <data name="Macro.Download.Path.Name" xml:space="preserve">
    <value>Download Path</value>
  </data>
  <data name="Macro.Download.Path.Desc" xml:space="preserve">
    <value>Downloading directory or zip file path
e.g.1.) C:/Download/GalleryName1
e.g.2.) D:/Download/GalleryName2.zip</value>
  </data>
  <data name="Macro.Download.ArchiveName.Name" xml:space="preserve">
    <value>Download Archive Name</value>
  </data>
  <data name="Macro.Download.ArchiveName.Desc" xml:space="preserve">
    <value>Downloading directory name or zip file name with extension
e.g.1.) GalleryName1
e.g.2.) GalleryName2.zip</value>
  </data>
  <data name="Macro.Download.ArchiveName2.Name" xml:space="preserve">
    <value>Download Archive Name 2</value>
  </data>
  <data name="Macro.Download.ArchiveName2.Desc" xml:space="preserve">
    <value>Downloading directory name or zip file name without extension
It will be same with gallery name
e.g.1.) GalleryName1
e.g.2.) GalleryName2</value>
  </data>
  <data name="Macro.Download.Result.Name" xml:space="preserve">
    <value>Download Result</value>
  </data>
  <data name="Macro.Download.Result.Desc" xml:space="preserve">
    <value>Download result as belows
1. {=Cancelled}
2. {=Excepted}
3. {=Success}</value>
  </data>
</root>